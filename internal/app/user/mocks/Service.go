// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/Suhaan-Bhandary/fundraiser-management/internal/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetUserList provides a mock function with given fields:
func (_m *Service) GetUserList() ([]dto.UserView, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserList")
	}

	var r0 []dto.UserView
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.UserView, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.UserView); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.UserView)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: req
func (_m *Service) LoginUser(req dto.LoginUserRequest) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.LoginUserRequest) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dto.LoginUserRequest) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.LoginUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: userDetail
func (_m *Service) RegisterUser(userDetail dto.RegisterUserRequest) error {
	ret := _m.Called(userDetail)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.RegisterUserRequest) error); ok {
		r0 = rf(userDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
