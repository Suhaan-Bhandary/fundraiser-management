// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/Suhaan-Bhandary/fundraiser-management/internal/pkg/dto"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// BanFundraiser provides a mock function with given fields: fundraiserId
func (_m *Service) BanFundraiser(fundraiserId uint) error {
	ret := _m.Called(fundraiserId)

	if len(ret) == 0 {
		panic("no return value specified for BanFundraiser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(fundraiserId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseFundraiser provides a mock function with given fields: fundraiserId, tokenData
func (_m *Service) CloseFundraiser(fundraiserId uint, tokenData dto.Token) error {
	ret := _m.Called(fundraiserId, tokenData)

	if len(ret) == 0 {
		panic("no return value specified for CloseFundraiser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, dto.Token) error); ok {
		r0 = rf(fundraiserId, tokenData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFundraiser provides a mock function with given fields: userDetail
func (_m *Service) CreateFundraiser(userDetail dto.CreateFundraiserRequest) (uint, error) {
	ret := _m.Called(userDetail)

	if len(ret) == 0 {
		panic("no return value specified for CreateFundraiser")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateFundraiserRequest) (uint, error)); ok {
		return rf(userDetail)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateFundraiserRequest) uint); ok {
		r0 = rf(userDetail)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateFundraiserRequest) error); ok {
		r1 = rf(userDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFundraiser provides a mock function with given fields: req
func (_m *Service) DeleteFundraiser(req dto.DeleteFundraiserRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFundraiser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.DeleteFundraiserRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFundraiserDetail provides a mock function with given fields: fundraiserId
func (_m *Service) GetFundraiserDetail(fundraiserId uint) (dto.FundraiserView, error) {
	ret := _m.Called(fundraiserId)

	if len(ret) == 0 {
		panic("no return value specified for GetFundraiserDetail")
	}

	var r0 dto.FundraiserView
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (dto.FundraiserView, error)); ok {
		return rf(fundraiserId)
	}
	if rf, ok := ret.Get(0).(func(uint) dto.FundraiserView); ok {
		r0 = rf(fundraiserId)
	} else {
		r0 = ret.Get(0).(dto.FundraiserView)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(fundraiserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFundraisers provides a mock function with given fields: req
func (_m *Service) ListFundraisers(req dto.ListFundraisersRequest) ([]dto.FundraiserView, uint, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ListFundraisers")
	}

	var r0 []dto.FundraiserView
	var r1 uint
	var r2 error
	if rf, ok := ret.Get(0).(func(dto.ListFundraisersRequest) ([]dto.FundraiserView, uint, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dto.ListFundraisersRequest) []dto.FundraiserView); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.FundraiserView)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.ListFundraisersRequest) uint); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(uint)
	}

	if rf, ok := ret.Get(2).(func(dto.ListFundraisersRequest) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UnBanFundraiser provides a mock function with given fields: fundraiserId
func (_m *Service) UnBanFundraiser(fundraiserId uint) error {
	ret := _m.Called(fundraiserId)

	if len(ret) == 0 {
		panic("no return value specified for UnBanFundraiser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(fundraiserId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFundraiser provides a mock function with given fields: updateDetail
func (_m *Service) UpdateFundraiser(updateDetail dto.UpdateFundraiserRequest) error {
	ret := _m.Called(updateDetail)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFundraiser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.UpdateFundraiserRequest) error); ok {
		r0 = rf(updateDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
